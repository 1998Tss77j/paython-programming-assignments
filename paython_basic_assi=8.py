# -*- coding: utf-8 -*-
"""paython basic assi=8

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1lxFY2voU5X_1tw0x9i1tBSHcvg3rPgTK

1. Write a Python Program to Add Two Matrices?
"""

def add_matrices(matrix1, matrix2):
    if len(matrix1) != len(matrix2) or len(matrix1[0]) != len(matrix2[0]):
        raise ValueError("Matrices must have the same dimensions for addition.")

    result_matrix = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix1[0])):
            row.append(matrix1[i][j] + matrix2[i][j])
        result_matrix.append(row)

    return result_matrix

def input_matrix(rows, columns):
    matrix = []
    print("Enter the elements row-wise:")
    for i in range(rows):
        row = []
        for j in range(columns):
            element = int(input(f"Enter element at position ({i}, {j}): "))
            row.append(element)
        matrix.append(row)
    return matrix

def main():
    try:
        rows = int(input("Enter the number of rows in the matrices: "))
        columns = int(input("Enter the number of columns in the matrices: "))

        print("Enter the elements of the first matrix:")
        matrix1 = input_matrix(rows, columns)

        print("Enter the elements of the second matrix:")
        matrix2 = input_matrix(rows, columns)

        result_matrix = add_matrices(matrix1, matrix2)

        print("\nThe sum of the matrices is:")
        for row in result_matrix:
            print(row)

    except ValueError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()

"""2. Write a Python Program to Multiply Two Matrices?"""

def multiply_matrices(matrix1, matrix2):
    if len(matrix1[0]) != len(matrix2):
        raise ValueError("Number of columns in the first matrix must be equal to the number of rows in the second matrix.")

    result_matrix = []
    for i in range(len(matrix1)):
        row = []
        for j in range(len(matrix2[0])):
            element = 0
            for k in range(len(matrix2)):
                element += matrix1[i][k] * matrix2[k][j]
            row.append(element)
        result_matrix.append(row)

    return result_matrix

def input_matrix(rows, columns):
    matrix = []
    print("Enter the elements row-wise:")
    for i in range(rows):
        row = []
        for j in range(columns):
            element = int(input(f"Enter element at position ({i}, {j}): "))
            row.append(element)
        matrix.append(row)
    return matrix

def main():
    try:
        rows1 = int(input("Enter the number of rows in the first matrix: "))
        columns1 = int(input("Enter the number of columns in the first matrix: "))

        print("Enter the elements of the first matrix:")
        matrix1 = input_matrix(rows1, columns1)

        rows2 = int(input("Enter the number of rows in the second matrix: "))
        columns2 = int(input("Enter the number of columns in the second matrix: "))

        print("Enter the elements of the second matrix:")
        matrix2 = input_matrix(rows2, columns2)

        result_matrix = multiply_matrices(matrix1, matrix2)

        print("\nThe product of the matrices is:")
        for row in result_matrix:
            print(row)

    except ValueError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()

"""3. Write a Python Program to Transpose a Matrix?"""

def transpose_matrix(matrix):
    rows = len(matrix)
    columns = len(matrix[0])

    # Create a new matrix with swapped dimensions (rows <-> columns)
    transposed_matrix = [[0 for _ in range(rows)] for _ in range(columns)]

    for i in range(rows):
        for j in range(columns):
            transposed_matrix[j][i] = matrix[i][j]

    return transposed_matrix

def input_matrix(rows, columns):
    matrix = []
    print("Enter the elements row-wise:")
    for i in range(rows):
        row = []
        for j in range(columns):
            element = int(input(f"Enter element at position ({i}, {j}): "))
            row.append(element)
        matrix.append(row)
    return matrix

def main():
    try:
        rows = int(input("Enter the number of rows in the matrix: "))
        columns = int(input("Enter the number of columns in the matrix: "))

        print("Enter the elements of the matrix:")
        matrix = input_matrix(rows, columns)

        print("\nThe original matrix is:")
        for row in matrix:
            print(row)

        transposed_matrix = transpose_matrix(matrix)

        print("\nThe transposed matrix is:")
        for row in transposed_matrix:
            print(row)

    except ValueError as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()

"""4. Write a Python Program to Sort Words in Alphabetic Order?"""

def sort_words_alphabetically(sentence):
    words = sentence.split()
    words.sort()
    return " ".join(words)

def main():
    try:
        sentence = input("Enter a sentence: my name is trupti ")
        sorted_sentence = sort_words_alphabetically(sentence)
        print("Words sorted in alphabetical order:trupti is name my")
        print(sorted_sentence)

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()

"""5. Write a Python Program to Remove Punctuation From a String?"""

import string

def remove_punctuation(input_string):
    # Create a translation table to remove punctuation characters
    translator = str.maketrans('', '', string.punctuation)
    # Use the translate method to remove punctuation from the input string
    cleaned_string = input_string.translate(translator)
    return cleaned_string

def main():
    try:
        input_string = input("Enter a string: ")
        cleaned_string = remove_punctuation(input_string)
        print("String without punctuation:")
        print(cleaned_string)

    except Exception as e:
        print(f"Error: {e}")

if __name__ == "__main__":
    main()