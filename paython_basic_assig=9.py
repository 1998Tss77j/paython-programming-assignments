# -*- coding: utf-8 -*-
"""paython basic assig=9

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14CViKQudUCz3KfkDhd-G8CuV5g9cct9R

1. Write a Python program to check if the given number is a Disarium Number?
"""

def is_disarium_number(number):
    num_str = str(number)
    length = len(num_str)
    sum_digits_power = sum(int(digit) ** (index + 1) for index, digit in enumerate(num_str))

    return number == sum_digits_power

# Test the function
if __name__ == "__main__":
    num_to_check = int(input("Enter a number to check if it's a Disarium Number: "))

    if is_disarium_number(num_to_check):
        print(f"{num_to_check} is a Disarium Number.")
    else:
        print(f"{num_to_check} is not a Disarium Number.")

"""2. Write a Python program to print all disarium numbers between 1 to 100?"""

def is_disarium_number(number):
    num_str = str(number)
    length = len(num_str)
    sum_digits_power = sum(int(digit) ** (index + 1) for index, digit in enumerate(num_str))

    return number == sum_digits_power

def find_disarium_numbers(start, end):
    disarium_numbers = []
    for num in range(start, end + 1):
        if is_disarium_number(num):
            disarium_numbers.append(num)
    return disarium_numbers

# Find and print Disarium Numbers between 1 and 100
if __name__ == "__main__":
    disarium_numbers_list = find_disarium_numbers(1, 100)
    print("Disarium Numbers between 1 and 100 are:", disarium_numbers_list)

"""3. Write a Python program to check if the given number is Happy Number?"""

def is_happy_number(number):
    def get_next_number(num):
        return sum(int(digit) ** 2 for digit in str(num))

    slow = number
    fast = get_next_number(number)

    while fast != 1 and slow != fast:
        slow = get_next_number(slow)
        fast = get_next_number(get_next_number(fast))

    return fast == 1

# Test the function
if __name__ == "__main__":
    num_to_check = int(input("Enter a number to check if it's a Happy Number: "))

    if is_happy_number(num_to_check):
        print(f"{num_to_check} is a Happy Number.")
    else:
        print(f"{num_to_check} is not a Happy Number.")

"""4. Write a Python program to print all happy numbers between 1 and 100?"""

def is_happy_number(number):
    def get_next_number(num):
        return sum(int(digit) ** 2 for digit in str(num))

    slow = number
    fast = get_next_number(number)

    while fast != 1 and slow != fast:
        slow = get_next_number(slow)
        fast = get_next_number(get_next_number(fast))

    return fast == 1

def find_happy_numbers(start, end):
    happy_numbers = []
    for num in range(start, end + 1):
        if is_happy_number(num):
            happy_numbers.append(num)
    return happy_numbers

# Find and print Happy Numbers between 1 and 100
if __name__ == "__main__":
    happy_numbers_list = find_happy_numbers(1, 100)
    print("Happy Numbers between 1 and 100 are:", happy_numbers_list)

"""5. Write a Python program to determine whether the given number is a Harshad Number?"""

def is_harshad_number(number):
    sum_of_digits = sum(int(digit) for digit in str(number))
    return number % sum_of_digits == 0

# Test the function
if __name__ == "__main__":
    num_to_check = int(input("Enter a number to check if it's a Harshad Number: "))

    if is_harshad_number(num_to_check):
        print(f"{num_to_check} is a Harshad Number.")
    else:
        print(f"{num_to_check} is not a Harshad Number.")

"""6. Write a Python program to print all pronic numbers between 1 and 100?"""

def is_pronic_number(number):
    for i in range(1, int(number ** 0.5) + 1):
        if i * (i + 1) == number:
            return True
    return False

def find_pronic_numbers(start, end):
    pronic_numbers = []
    for num in range(start, end + 1):
        if is_pronic_number(num):
            pronic_numbers.append(num)
    return pronic_numbers

# Find and print pronic numbers between 1 and 100
if __name__ == "__main__":
    pronic_numbers_list = find_pronic_numbers(1, 100)
    print("Pronic numbers between 1 and 100 are:", pronic_numbers_list)